# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Request\GoogleShoppingRequester:
        arguments:
            $client: "@eight_points_guzzle.client.api_shopping"

    App\Adwords\Shopping\Provider\ExtractorProvider:
        configurator: 'App\Adwords\Shopping\Provider\ExtractorProviderConfigurator:configure'

    App\Request\AdwordsSegmentationRequester:
        arguments:
            $client: "@eight_points_guzzle.client.api_adwords"

    App\Request\AdwordsAdgroupCampaignRequester:
        arguments:
            $client: "@eight_points_guzzle.client.api_adwords"

    App\Adwords\Alert\AlertSynchronizer:
        arguments:
            $database: "@mongo.connection"

    App\Controller\GetAlertsDataController:
        arguments:
            $database: "@mongo.connection"

    App\EventListener\JWTCreatedListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    #We need it to register stream on boot
    app.aws.s3:
        alias: 'aws.s3'
        public: true